<?php

require_once "extended_search.inc";
require_once "extended_search.admin.inc";
require_once "extended_search.controller.inc";

/**
 * Implements hook_permission().
 */
function extended_search_permission() {
  $permissions = array(
    'administer extended_search' => array(
      'title' => t('Administer extended search'),
      'description' => t('Administer extended search pages.'),
    ),
    'access extended_search' => array(
      'title' => t('Access extended search'),
      'description' => t('Access extended search pages.'),
    ),
  );

  return $permissions;
}

/**
 * Implements hook_menu();
 */
function extended_search_menu() {
  $items = array();

  // We're using %menu_trail so that autocomplete works with
  // string containing slashes.
  $items['extended_search/autocomplete/%/%/%/%/%menu_tail'] = array(
    'page callback' => 'extended_search_autocomplete_callback',
    'page arguments' => array(2, 3, 4, 5, 6),
    'access arguments' => array('access extended_search'),
    'load arguments' => array('%map', '%index'),
    'type' => MENU_CALLBACK,
  );

  // Actually never called but need to be there otherwise
  // #autocomplete_path is considered invalid.
  $items['extended_search/autocomplete/%/%/%/%'] = array(
    'page callback' => 'extended_search_autocomplete_callback',
    'page arguments' => array(2, 3, 4, 5),
    'access arguments' => array('access extended_search'),
    'type' => MENU_CALLBACK,
  );

  $items['extended_search/%extended_search'] = array(
    'title callback' => 'extended_search_page_title',
    'title arguments' => array(1),
    'page callback' => 'extended_search_page_view',
    'page arguments' => array(1),
    'access arguments' => array('access extended_search'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function extended_search_theme() {
  $theme = array(
    'extended_search' => array(
      'render element' => 'elements',
      'template' => 'extended_search',
    ),
    'extended_search_form_fields' => array(
      'render element' => 'element',
    ),
    'extended_search_page_form_filters' => array(
      'render element' => 'element',
    ),
  );
  return $theme;
}

/**
 * Implements hook_entity_info().
 */
function extended_search_entity_info() {
  $info['extended_search'] = array(
    'label' => t('Extended search page'),
    'entity class' => 'ExtendedSearchEntity',
    'controller class' => 'ExtendedSearchController',
    'base table' => 'extended_search_entity',
    'label callback' => 'entity_class_label',
    'uri callback' => 'entity_class_uri',
    'fieldable' => FALSE,
    'exportable' => TRUE,
    'configuration' => TRUE,
    'entity keys' => array(
      'id' => 'entity_id',
      'name' => 'entity_name',
      'status' => 'entity_status',
      'module' => 'entity_module',
    ),
    'bundles' => array(),
    'module' => 'extended_search',
    'access callback' => 'extended_search_access',
    'admin ui' => array(
      'path' => 'admin/structure/extended_search',
      'controller class' => 'ExtendedSearchUIController',
      'file' => 'extended_search.admin.inc',
    ),
  );

  return $info;
}

/**
 * Entity access callback.
 */
function extended_search_access($op, $type = NULL, $account = NULL) {
  if ($op === 'view') {
    return user_access('access extended_search', $account);
  }
  else {
    return user_access('administer extended_search', $account);
  }
}

/**
 * Entity load function.
 */
function extended_search_load($id = NULL, $reset = FALSE) {
  $ids = (isset($id) ? array($id) : array());
  $extended_search = extended_search_load_multiple($ids, $reset);
  return isset($extended_search) ? reset($extended_search) : FALSE;
}

/**
 * Load multiple entities.
 */
function extended_search_load_multiple($ids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('extended_search', $ids, $conditions, $reset);
}

/**
 * Get filter groups.
 */
function extended_search_get_groups() {
  $groups = module_invoke_all('extended_search_filter_group_info');
  drupal_alter('extended_search_filter_group_info', $groups);
  uasort($groups, 'drupal_sort_weight');
  return $groups;
}

/**
 * Get allowed entity types.
 */
function extended_search_get_entity_types() {
  $allowed_entity_types = array();
  drupal_alter('extended_search_allowed_entity_types', $allowed_entity_types);
  asort($allowed_entity_types);
  reset($allowed_entity_types);
  return $allowed_entity_types;
}

/**
 * Get bundles for a particular entity type.
 */
function extended_search_get_bundles($entity_type) {
  $bundles = array();
  if (!empty($entity_type)) {
    $info = field_info_bundles($entity_type);
    foreach ($info as $name => $bundle) {
      $bundles[$name] = isset($bundle['label']) ? $bundle['label'] : $name;
    }
  }
  asort($bundles);
  reset($bundles);
  return $bundles;
}

/**
 * Get fields for a particular bundle.
 */
function extended_search_get_fields($entity_type, $bundle) {
  $fields = array();

  if (!empty($entity_type) && !empty($bundle)) {
    // Entity schema info
    $entity_info = entity_get_info($entity_type);
    $schema_info = drupal_get_schema($entity_info['base table']);

    // Fields info
    $fields_info = field_info_fields();

    // Entity properties
    $property_info = entity_get_property_info($entity_type);

    // Field handlers
    $handlers = array();
    foreach (extended_search_get_field_handler_info() as $id => $handler) {
      $types = array_merge($handler['schema types'], $handler['field types']);
      foreach ($types as $type) {
        $handlers[$type][$id] = $handler['label'];
      }
    }

    // Combine entity and bundle properties
    $properties = $property_info['properties'];
    if (isset($property_info['bundles'][$bundle]['properties'])) {
      $properties += $property_info['bundles'][$bundle]['properties'];
    }

    // Iterate through properties and if handler exists for property type then add to the list of fields.
    foreach ($properties as $name => $info) {
      if (isset($info['schema field'], $schema_info['fields'][$info['schema field']]['type'])) {
        $name = $info['schema field'];
        $type = $schema_info['fields'][$name]['type'];
      }
      elseif (!empty($info['field']) && isset($fields_info[$name]['type'])) {
        $type = $fields_info[$name]['type'];
        $field = TRUE;
      }
      else {
        continue;
      }
      if (isset($handlers[$type])) {
        $fields[$name] = array(
          'label' => $info['label'],
          'handlers' => $handlers[$type],
        );
      }
    }
  }

  ksort($fields);

  return $fields;
}

/**
 * Return info on available field handlers.
 */
function extended_search_get_field_handler_info($handler_id = NULL) {
  // We use drupal_static pattern as it can be called quite often.
  static $drupal_static_fast;
  if (!isset($drupal_static_fast)) {
    $drupal_static_fast['static_extended_search_field_handler_info'] = &drupal_static(__FUNCTION__);
  }

  $field_handler_info = &$drupal_static_fast['static_extended_search_field_handler_info'];

  if (empty($field_handler_info)) {
    $info = module_invoke_all('extended_search_field_handler_info');

    ksort($info);

    foreach ($info as $id => $handler) {
      // Check validity
      if (empty($handler['schema types']) && empty($handler['field types'])) {
        watchdog('extended_search', 'Invalid field handler: no type.', array(), WATCHDOG_ERROR);
      }
      elseif (empty($handler['module'])) {
        watchdog('extended_search', 'Invalid field handler: invalid module name.', array(), WATCHDOG_ERROR);
      }
      elseif (empty($handler['class'])) {
        watchdog('extended_search', 'Invalid field handler: invalid class name.', array(), WATCHDOG_ERROR);
      }
      elseif (empty($handler['file'])) {
        watchdog('extended_search', 'Invalid field handler: invalid file name.', array(), WATCHDOG_ERROR);
      }
      else {
        $path = DRUPAL_ROOT . '/' . drupal_get_path('module', $handler['module']) . '/' . $handler['file'];

        if (!module_exists($handler['module'])) {
          watchdog('extended_search', 'Invalid field handler: invalid module [!module].', array('!module' => $handler['module']), WATCHDOG_ERROR);
        }
        elseif (!file_exists($path)) {
          watchdog('extended_search', 'Invalid field handler: invalid class file [!file].', array('!file' => $handler['file']), WATCHDOG_ERROR);
        }
        else {
          // Correct missing information
          if (!isset($handler['label'])) {
            $handler['label'] = t(drupal_ucfirst($id));
          }
          if (!isset($handler['description'])) {
            $handler['description'] = $handler['label'];
          }
          if (!isset($handler['schema types'])) {
            $handler['schema types'] = array();
          }
          if (!isset($handler['field types'])) {
            $handler['field types'] = array();
          }

          $handler['id'] = $id;

          $field_handler_info[$id] = $handler;
        }
      }
    }
  }

  if (empty($handler_id)) {
    return $field_handler_info;
  }
  elseif (isset($field_handler_info[$handler_id])) {
    return $field_handler_info[$handler_id];
  }

  return NULL;
}

/**
 * Get a ExtendedSearchFieldHander object (or all of the available ones)
 */
function extended_search_get_field_handler($entity_type, $bundle, $handler_id = NULL) {
  if (empty($entity_type) || empty($bundle)) {
    return NULL;
  }

  // We use drupal_static pattern as it can be called quite often.
  static $drupal_static_fast;
  if (!isset($drupal_static_fast)) {
    $drupal_static_fast['static_extended_search_field_handlers'][$entity_type][$bundle] = &drupal_static(__FUNCTION__);
  }

  $field_handlers = &$drupal_static_fast['static_extended_search_field_handlers'][$entity_type][$bundle];

  // Return a new ExtendedSearchFieldHandler object corresponding to the given id.
  if (!empty($handler_id)) {
    if (!isset($field_handlers[$handler_id])) {
      $field_handler_info = extended_search_get_field_handler_info($handler_id);

      if (!isset($field_handler_info)) {
        watchdog('extended_search', 'Invalid field handler [!handler].', array('!handler' => $handler_id), WATCHDOG_ERROR);
        return NULL;
      }

      $field_handlers[$handler_id] = extended_search_build_field_handler($field_handler_info, $entity_type, $bundle);
    }
    return $field_handlers[$handler_id];
  }
  // Else return the full list of Handlers available for the couple entity_type/bundle.
  else {
    if (empty($field_handlers)) {
      $field_handler_info = extended_search_get_field_handler_info();

      foreach ($field_handler_info as $id => $info) {
        $field_handlers[$id] = extended_search_build_field_handler($info, $entity_type, $bundle);
      }
    }
    return $field_handlers;
  }
}

/**
 * Helper function to construct an ExtendedSearchFieldHandler object.
 */
function extended_search_build_field_handler($handler_info, $entity_type, $bundle) {
  include_once DRUPAL_ROOT . '/' . drupal_get_path('module', $handler_info['module']) . '/' . $handler_info['file'];

  $class = $handler_info['class'];

  if (!class_exists($class)) {
    watchdog('extended_search', 'Invalid field handler: invalid class [!class].', array('!class' => $class), WATCHDOG_ERROR);
    return NULL;
  }
  else {
    return new $class($handler_info['id'], $entity_type, $bundle);
  }
}

/**
 * Helper function to include a class file associated to a field handler.
 */
function extended_search_include_field_handler($handler_id) {
  $field_handler_info = extended_search_get_field_handler_info($handler_id);
  if (isset($field_handler_info)) {
    include_once DRUPAL_ROOT . '/' . drupal_get_path('module', $field_handler_info['module']) . '/' . $field_handler_info['file'];
  }
}

/**
 * Extended search form.
 */
function extended_search_form($form, &$form_state, $extended_search) {
  if (!isset($form_state['values'])) {
    $form_state['values'] = array();
  }

  if (isset($extended_search)) {
    $form_state['values'] += (array) $extended_search;
  }

  // Unset values in case entity_type or bundle has been modified.
  if (isset($form_state['triggering_element']['#name'])) {
    switch ($form_state['triggering_element']['#name']) {
      case 'target_entity_type':
        unset($form_state['values']['target_bundle']);
        unset($form_state['input']['target_bundle']);
      case 'target_bundle':
        unset($form_state['values']['target_fields']);
        unset($form_state['input']['target_fields']);
        break;
      default:
        break;
    }
  }

  $form['entity_name'] = array(
    '#type' => 'machine_name',
    '#title' => t('Name'),
    '#required' => TRUE,
    '#maxlength' => 32,
    '#default_value' => isset($form_state['values']['entity_name']) ? $form_state['values']['entity_name'] : '',
    '#machine_name' => array(
      'exists' => 'extended_search_name_exists',
    ),
  );

  $form['entity_label'] = array(
    '#type' => 'textfield',
    '#title' => t('Label'),
    '#required' => TRUE,
    '#maxlength' => 64,
    '#default_value' => isset($form_state['values']['entity_label']) ? $form_state['values']['entity_label'] : '',
  );

  $form['entity_description'] = array(
    '#type' => 'textarea',
    '#title' => t('Description'),
    '#required' => FALSE,
    '#default_value' => isset($form_state['values']['entity_description']) ? $form_state['values']['entity_description'] : '',
  );

  $entity_types = extended_search_get_entity_types();
  $entity_type = !empty($form_state['values']['target_entity_type']) ? $form_state['values']['target_entity_type'] : key($entity_types);

  $form['target_entity_type'] = array(
    '#type' => 'select',
    '#title' => t('Entity type'),
    '#required' => TRUE,
    '#options' => $entity_types,
    '#default_value' => $entity_type,
    '#ajax' => array(
      'callback' => 'extended_search_bundle_ajax_callback',
      'effect' => 'fade',
    ),
  );

  $bundles = extended_search_get_bundles($entity_type);
  $bundle = !empty($form_state['values']['target_bundle']) ? $form_state['values']['target_bundle'] : key($bundles);

  $form['target_bundle'] = array(
    '#type' => 'select',
    '#title' => t('Bundle'),
    '#required' => TRUE,
    '#options' => $bundles,
    '#default_value' => $bundle,
    '#prefix' => '<div id="edit-target-bundle-wrapper">',
    '#suffix' => '</div>',
    '#ajax' => array(
      'callback' => 'extended_search_form_fields_ajax_callback',
      'effect' => 'fade',
    ),
  );

  $fields = extended_search_get_fields($entity_type, $bundle);

  $form['target_fields'] = array(
    '#type' => 'fieldset',
    '#title' => t('Fields'),
    '#tree' => TRUE,
    '#prefix' => '<div id="edit-target-fields-wrapper">',
    '#suffix' => '</div>',
    '#theme' => 'extended_search_form_fields',
  );

  $weight_delta = count($fields) - 1;

  foreach ($fields as $name => $field) {
    $handlers = $field['handlers'];

    $label = isset($form_state['values']['target_fields'][$name]['label']) ? $form_state['values']['target_fields'][$name]['label'] : $field['label'];
    $handler = isset($form_state['values']['target_fields'][$name]['handler']) ? $form_state['values']['target_fields'][$name]['handler'] : key($handlers);
    $weight = isset($form_state['values']['target_fields'][$name]['weight']) ? $form_state['values']['target_fields'][$name]['weight'] : $weight_delta;

    if (!isset($handlers[$handler])) {
      $handler = key($handlers);
    }

    $form['target_fields'][$name] = array(
      '#type' => 'container',
      '#tree' => TRUE,
      'selected' => array(
        '#type' => 'checkbox',
        '#default_value' => isset($form_state['values']['target_fields'][$name]),
      ),
      'field' => array(
        '#type' => 'markup',
        '#markup' => $name,
      ),
      'label' => array(
        '#type' => 'textfield',
        '#maxlength' => 128,
        '#default_value' => $label,
      ),
      'handler' => array(
        '#type' => 'select',
        '#options' => $handlers,
        '#default_value' => $handler,
      ),
      'weight' => array(
        '#type' => 'weight',
        '#delta' => $weight_delta,
        '#default_value' => $weight,
        '#attributes' => array('class' => array('extended-search-field-weight')),
      ),
      '#weight' => $weight,
    );
  }

  $submit = array();
  if (!empty($form['#submit'])) {
    $submit += $form['#submit'];
  }

  $form['save'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#submit' => $submit + array('extended_search_form_submit'),
  );

  return $form;
}

/**
 * Exists callback for extend_search machine name.
 */
function extended_search_name_exists($value) {
  $extended_search = entity_load_single('extended_search', $value);
  return !empty($extended_search);
}

/**
 * Ajax callback. Update bundle and fields when entity_type is changed.
 */
function extended_search_bundle_ajax_callback($form, $form_state) {
  $commands = array();
  $commands[] = ajax_command_replace('#edit-target-bundle-wrapper', drupal_render($form['target_bundle']));
  $commands[] = ajax_command_replace('#edit-target-fields-wrapper', drupal_render($form['target_fields']));

  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Ajax callback. Update fields when bundle is changed.
 */
function extended_search_form_fields_ajax_callback($form, $form_state) {
  $commands = array();
  $commands[] = ajax_command_replace('#edit-target-fields-wrapper', drupal_render($form['target_fields']));

  return array('#type' => 'ajax', '#commands' => $commands);
}

/**
 * Theme function. Display fields as table.
 */
function theme_extended_search_form_fields($variables) {
  $element = $variables['element'];

  $rows = array();
  $header = array(
    t('Selected'),
    t('Field'),
    t('Label'),
    t('Handler'),
    t('Weight'),
  );
  foreach (element_children($element) as $key) {
    $row = array();
    $row[] = drupal_render($element[$key]['selected']);
    $row[] = drupal_render($element[$key]['field']);
    $row[] = drupal_render($element[$key]['label']);
    $row[] = drupal_render($element[$key]['handler']);
    $row[] = drupal_render($element[$key]['weight']);
    $rows[] = array(
      'data' => $row,
      'class' => array('draggable'),
    );
  }

  $output = theme('table', array(
    'header' => $header,
    'rows' => $rows,
    'empty' => t('No field found.'),
    'attributes' => array(
      'id' => 'extended-search-field-table',
    ),
  ));

  drupal_add_tabledrag('extended-search-field-table', 'order', 'sibling', 'extended-search-field-weight');

  return $output;
}

/**
 * Extended search form.
 */
function extended_search_form_submit($form, &$form_state) {
  // Keep only necessary information for fields.
  foreach ($form_state['values']['target_fields'] as $key => $field) {
    if (empty($field['selected'])) {
      unset($form_state['values']['target_fields'][$key]);
    }
    else {
      unset($form_state['values']['target_fields'][$key]['selected']);
    }
  }

  // Build the entity and save.
  $extended_search = entity_ui_controller('extended_search')->entityFormSubmitBuildEntity($form, $form_state);
  $extended_search->save();

  // Redirect to the admin page.
  $info = $extended_search->entityInfo();
  if (isset($info['admin ui']['path'])) {
     $form_state['redirect'] = $info['admin ui']['path'];
  }
}

/**
 * Extended search page title callback.
 */
function extended_search_page_title($extended_search) {
  return $extended_search->label();
}

/**
 * Extended search page view callback.
 */
function extended_search_page_view($extended_search, $view_mode = 'full', $langcode = NULL) {
  $form_state = array();

  // Setting up default values.
  foreach (array('all', 'any', 'exclude', 'exact') as $type) {
    $form_state['values']['full_text_search'][$type] = '';
  }

  // Get filters from url request.
  $parameters = extended_search_unpack_query_parameters();

  if (isset($parameters) && $parameters['entity_name'] === $extended_search->entity_name) {
    $handlers = $extended_search->getFieldHandlers();
    $fields = $extended_search->getFields();

    $quote = function ($string) {
      return (strpos($string, ' ') !== FALSE) ? '"' . $string . '"' : $string;
    };

    // Full text search
    foreach (array('all', 'any', 'exclude') as $type) {
      if (!empty($parameters['text'][$type])) {
        $form_state['values']['full_text_search'][$type] = implode(' ', array_map($quote, $parameters['text'][$type]));
      }
    }
    if (!empty($parameters['text']['exact'])) {
      $form_state['values']['full_text_search']['exact'] = $parameters['text']['exact'];
    }

    // Filters
    foreach ($parameters['filters'] as $field_name => $filters) {
      if (isset($handlers[$field_name])) {
        $handler = $handlers[$field_name];
        $field_info = $fields[$field_name];

        foreach ($filters as $index => $filter) {
          $value = $handler->getFilterValue($field_name, $field_info, $filter[1]);

          $form_state['values']['filters'][$field_name][]['item'] = array(
            'operator' => $filter[0],
            'value' => $value,
          );
        }
      }
    }

  }

  $form_id = 'extended_search_page_form';
  $form_state['build_info']['args'] = array($extended_search);
  return drupal_build_form($form_id, $form_state);
}


/**
 * Full text search form.
 */
function extended_search_full_text_search_form($form, &$form_state, $extended_search) {
  $form['full_text_search'] = array(
    '#type' => 'fieldset',
    '#title' => t('Full text search <em>(click to expand)</em>'),
    '#tree' => TRUE,
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  /*$form['full_text_search']['explanation'] = array(
    '#markup' => '<div class="extended-search-explanation">* ' . t('Type the keywords or phrase you want to search for in the text.') . '</div>',
    '#weight' => -100,
  );*/

  $form['full_text_search']['all'] = array(
    '#type' => 'textfield',
    '#title' => t('With all the words (AND)'),
    '#description' => t('Example: "gender health coordination" finds only content with all the terms {gender AND health AND coordination}.'),
    '#default_value' => $form_state['values']['full_text_search']['all'],
  );

  $form['full_text_search']['any'] = array(
    '#type' => 'textfield',
    '#title' => t('With at least one of the words (OR)'),
    '#description' => t('Example: "mines cluster" finds any content with either of the terms {mines OR cluster}.'),
    '#default_value' => $form_state['values']['full_text_search']['any'],
  );

  $form['full_text_search']['exact'] = array(
    '#type' => 'textfield',
    '#title' => t('With the exact phrase'),
    '#description' => t('Example: "Office for the Coordination" finds any content with this exact phrase.'),
    '#default_value' => $form_state['values']['full_text_search']['exact'],
  );

  $form['full_text_search']['exclude'] = array(
    '#type' => 'textfield',
    '#title' => t('Excluding the words'), //t('Without the words'),
    '#description' => t('Example: "conflict" excludes any content with this term.'),
    '#default_value' => $form_state['values']['full_text_search']['exclude'],
  );

  foreach ($form_state['values']['full_text_search'] as $item) {
    if (!empty($item)) {
      $form['full_text_search']['#collapsed'] = FALSE;
      break;
    }
  }

  return $form;
}

/**
 * Extended search - filter block form.
 */
function extended_search_filters_form($form, &$form_state, $extended_search) {
  $form['filters'] = array(
    '#type' => 'fieldset',
    '#title' => t('Filter using ReliefWeb categories <em>(click to expand)</em>'),
    '#tree' => TRUE,
    '#prefix' => '<div id="extended-search-page-filters-wrapper">',
    '#suffix' => '</div>',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );

  /*$form['filters']['explanation'] = array(
    '#markup' => '<div class="extended-search-explanation">* ' . t('Filter using ReliefWeb categories.') . '</div>',
    '#weight' => -100,
  );*/
  if (isset($form_state['triggering_element']['#array_parents'])) {
    $triggering_element = $form_state['triggering_element']['#array_parents'];
  }
  else {
    $triggering_element = array();
  }

  $fields = $extended_search->getFields();
  $handlers = $extended_search->getFieldHandlers();
  uasort($fields, 'drupal_sort_weight');

  foreach ($fields as $field_name => $field_info) {
    if (!isset($handlers[$field_name])) {
      continue;
    }

    $formatted_field_name = extended_search_format_field_name($field_name);

    $handler = $handlers[$field_name];

    $filter = array(
      '#type' => 'item',
      '#title' => t($field_info['label']),
      '#tree' => TRUE,
      '#prefix' => '<div id="filter-' . $formatted_field_name . '" class="extended-search-filter">',
      '#suffix' => '</div>',
      '#theme' => 'extended_search_page_form_filters',
    );

    $index_new = 0;

    unset($form_state['values']['filters'][$field_name]['add']);

    if (isset($form_state['values']['filters'][$field_name])) {
      $filters = $form_state['values']['filters'][$field_name];
      unset($form_state['values']['filters'][$field_name]);
      unset($form_state['input']['filters'][$field_name]);

      foreach ($filters as $index => $item) {
        if ($triggering_element != array('filters', $field_name, $index, 'item', 'remove')) {
          $filter[$index_new] = extended_search_page_add_filter($handler, $field_name, $field_info, $index_new, $item['item']['operator'], $item['item']['value']);
          $form_state['values']['filters'][$field_name][$index_new] = $item;
          $index_new++;
        }
      }

      $form['filters']['#collapsed'] = FALSE;
    }

    if ($triggering_element == array('filters', $field_name, 'add')) {
      $filter[$index_new] = extended_search_page_add_filter($handler, $field_name, $field_info, $index_new);
    }

    $action = 'add';
    $filter[$action] = array(
      '#type' => 'button',
      '#default_value' => t($action),
      '#name' => $field_name . '_' . $action,
      '#attributes' => array('class' => array('extended-search-filter-' . $action)),
      '#ajax' => array(
        'callback' => 'extended_search_page_form_' . $action . '_filter_ajax_callback',
        'event' => 'click',
        'wrapper' => 'filter-' . $formatted_field_name,
      ),
    );

    $form['filters'][$field_name] = $filter;
  }

  return $form;
}

function extended_search_page_add_filter($handler, $field_name, $field_info, $index, $operator = NULL, $value = NULL) {
  $form = array();

  $form['item'] = array(
    '#type' => 'container',
    '#tree' => TRUE,
    '#attributes' => array(
      'class' => array('extended-search-filter-item'),
    ),
  );

  $action = 'remove';

  $form['item'] += $handler->buildInput($field_name, $index === 0, $operator, $value);

  $formatted_field_name = extended_search_format_field_name($field_name);

  $form['item'][$action] = array(
    '#type' => 'button',
    '#default_value' => t($action),
    '#name' => $field_name . '_' . $action . '_' . $index,
    '#attributes' => array('class' => array('extended-search-filter-' . $action)),
    '#ajax' => array(
      'callback' => 'extended_search_page_form_' . $action . '_filter_ajax_callback',
      'event' => 'click',
      'wrapper' => 'filter-' . $formatted_field_name,
    ),
  );

  return $form;
}

/**
 * Theme function. Display selected filters as table.
 */
function theme_extended_search_page_form_filters($variables) {
  $element = $variables['element'];

  $rows = array();
  $header = array();

  $add = drupal_render($element['add']);
  unset($element['add']);

  $children = element_children($element);
  $last = end($children);
  reset($children);

  foreach ($children as $key) {
    $row = array();
    $row[] = array(
      'data' => drupal_render($element[$key]['item']['operator']),
      'class' => array('extended-search-filter-operator-cell'),
    );
    $row[] = array(
      'data' => drupal_render($element[$key]['item']['value']),
      'class' => array('extended-search-filter-value-cell'),
    );
    $action = isset($element[$key]['item']['remove']) ? 'remove' : 'add';
    $row[] = array(
      'data' => drupal_render($element[$key]['item']['remove']) . ($key === $last ? $add : ''),
      'class' => array('extended-search-filter-action-cell'),
    );
    $rows[] = array(
      'data' => $row,
    );
  }

  $output = theme('table', array(
    'header' => $header,
    'rows' => $rows,
    'sticky' => FALSE,
    'empty' => t('<em>Click to add</em>') . $add,
  ));

  return $output;
}

/**
 * "Your search query" block on top of the form.
 */
function extended_search_search_query_form($form, &$form_state, $extended_search) {
  $form['search_query'] = array(
    '#type' => 'fieldset',
    '#title' => t('Your search query'),
    '#weight' => -1,
  );

  $form['search_query']['queries'] = array(
    '#type' => 'markup',
    '#markup' => '<div id="extended-search-search-query"></div>',
  );

  return $form;
}

/**
 * Extended search form displayed in block or page.
 */
function extended_search_page_form($form, &$form_state, $extended_search) {
  if (!isset($form)) {
    $form = array();
  }

  // Filters blocks.
  $form += extended_search_filters_form($form, $form_state, $extended_search);

  // Full text search block.
  $form += extended_search_full_text_search_form($form, $form_state, $extended_search);

  // Add the user query at the beginning.
  //$form += extended_search_search_query_form($form, $form_state, $extended_search);
  /*$form['#attached']['js'] = array(
    'misc/tabledrag.js',
    'misc/tableheader.js',
    drupal_get_path('module', 'extended_search') . '/js/page.form.js',
  );*/

  // Submit
  $submit = array();
  if (!empty($form['#submit'])) {
    $submit += $form['#submit'];
  }

  $form['reset'] = array(
    '#type' => 'submit',
    '#value' => t('Reset'),
    '#submit' => $submit + array('extended_search_page_form_submit'),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Search'),
    '#submit' => $submit + array('extended_search_page_form_submit'),
  );

  $form['#attached']['library'][] = array('system', 'drupal.autocomplete');

  $form['#attached']['css'] = array(
    drupal_get_path('module', 'extended_search') . '/css/page.form.css',
  );

  $form['#attached']['js'] = array(
    drupal_get_path('module', 'extended_search') . '/js/page.form.js',
  );

  $form['#prefix'] = '<div class="extended-search-page-form">';
  $form['#suffix'] = '</div>';

  $form_state['extended_search'] = $extended_search;

  return $form;
}

function theme_extended_search_page_filter($variables) {

}

/**
 * Page form submit.
 */
function extended_search_page_form_submit($form, &$form_state) {
  $reset = isset($form_state['triggering_element']['#array_parents']) && $form_state['triggering_element']['#array_parents'] == array('reset');

  $options = array('query' => drupal_get_query_parameters());

  if (!$reset) {
    $extended_search = $form_state['extended_search'];

    $handlers = $extended_search->getFieldHandlers();

    $fields = $extended_search->getFields();

    $search = array(
      'entity_name' => $extended_search->entity_name,
    );

    // Full text search
    foreach (array('all', 'any', 'exclude') as $type) {
      if (!empty($form_state['values']['full_text_search'][$type])) {
        //$search['text'][$type] = preg_split('/\s+/', $form_state['values']['full_text_search'][$type]);
        $search['text'][$type] = extended_search_parse_search_string($form_state['values']['full_text_search'][$type]);
      }
    }
    if (!empty($form_state['values']['full_text_search']['exact'])) {
      $search['text']['exact'] = $form_state['values']['full_text_search']['exact'];
    }

    // Filters
    if (isset($form_state['values']['filters'])) {
      foreach ($form_state['values']['filters'] as $field_name => $filters) {
        unset($filters['add']);
        if (isset($handlers[$field_name])) {
          $handler = $handlers[$field_name];
          $field_info = $fields[$field_name];

          foreach ($filters as $index => $filter) {
            if (!empty($filter['item']['value'])) {
              $operator = $filter['item']['operator'];
              $value = $filter['item']['value'];

              $value = $handler->getValue($field_name, $field_info, $value);

              if (!empty($value)) {
                $search['filters'][$field_name][] = array($operator, $value);
              }
            }
          }
        }
      }
    }

    $search_query = drupal_json_encode($search);
    $options['query']['extended_search'] = $search_query;
  }
  else {
    unset($options['query']['extended_search']);
  }

  if (!$reset && isset($options['query']['path'])) {
    $path = trim($options['query']['path']);
    unset($options['query']['path']);
  }
  else {
    $path = request_path();
  }

  $form_state['redirect'] = array($path, $options);
}

/**
 * Helper function. Parse search string.
 * Borrowed from Search API - query.inc > parseKeys().
 */
function extended_search_parse_search_string($string) {
  $ret = explode(' ', $string);
  $quoted = FALSE;
  $str = '';
  foreach ($ret as $k => $v) {
    if (!$v) {
      continue;
    }
    if ($quoted) {
      if ($v[drupal_strlen($v)-1] == '"') {
        $v = substr($v, 0, -1);
        $str .= ' ' . $v;
        $ret[$k] = $str;
        $quoted = FALSE;
      }
      else {
        $str .= ' ' . $v;
        unset($ret[$k]);
      }
    }
    elseif ($v[0] == '"') {
      $len = drupal_strlen($v);
      if ($len > 1 && $v[$len-1] == '"') {
        $ret[$k] = substr($v, 1, -1);
      }
      else {
        $str = substr($v, 1);
        $quoted = TRUE;
        unset($ret[$k]);
      }
    }
  }
  if ($quoted) {
    $ret[] = $str;
  }
  return array_filter($ret);
}

/**
 * Ajax callback to add a filter.
 */
function extended_search_page_form_add_filter_ajax_callback($form, $form_state) {
  return $form['filters'][$form_state['triggering_element']['#array_parents'][1]];
}

/**
 * Ajax callback to remove a filter.
 */
function extended_search_page_form_remove_filter_ajax_callback($form, $form_state) {
  return $form['filters'][$form_state['triggering_element']['#array_parents'][1]];
}

/**
 * Return an autocomplete path of a given handler.
 */
function extended_search_get_autocomplete_path($handler_id, $entity_type, $bundle, $field_name) {
  return "extended_search/autocomplete/{$handler_id}/{$entity_type}/{$bundle}/{$field_name}";
}

/**
 * Autocomplete callback.
 */
function extended_search_autocomplete_callback($handler_id, $entity_type, $bundle, $field_name, $string = '') {
  $result = array();

  $handler = extended_search_get_field_handler($entity_type, $bundle, $handler_id);
  if (isset($handler)) {
    $result = $handler->autocomplete($field_name, $string);
  }

  drupal_json_output($result);
}


/**
 * Helper function to get unpack extended_search query parameter
 * and eventually load the associated extended_search.
 */
function extended_search_unpack_query_parameters($load = FALSE) {
  $query_parameters = drupal_get_query_parameters();

  if (isset($query_parameters['extended_search'])) {
    $parameters = drupal_json_decode($query_parameters['extended_search']);
    if ($load === TRUE) {
      $parameters['extended_search'] = extended_search_load($parameters['entity_name']);
    }
    return $parameters;
  }

  return NULL;
}

/**
 * Helper function to get a formatted field name suitable to use in class names.
 */
function extended_search_format_field_name($field_name) {
  return strtr(drupal_strtolower($field_name), array(' ' => '-', '_' => '-', '[' => '-', ']' => ''));
}

/**
 * Implements hook_block_info().
 */
function extended_search_block_info() {
  $blocks = array();

  $entity_names = db_query('SELECT entity_name, entity_label FROM {extended_search_entity}')->fetchAllKeyed();

  foreach ($entity_names as $entity_name => $entity_label) {
    $blocks[$entity_name] = array(
      'info' => t('Extended Search: ' . $entity_label),
      'cache' => DRUPAL_NO_CACHE,
    );
  }

  $blocks['extended_search_query'] = array(
    'info' => t('Extended Search Query'),
    'cache' => DRUPAL_NO_CACHE,
  );

  return $blocks;
}

/**
 * Implements hook_block_view.
 */
function extended_search_block_view($delta = '') {
  $block = array();

  if ($delta === 'extended_search_query') {
    $block = extended_search_build_extended_search_query_block();
  }
  else {
    $extended_search = extended_search_load($delta);

    if (isset($extended_search)) {
      $options = array('query' => drupal_get_query_parameters());
      if (isset($options['query']['extended_search'])) {
        $options['query']['extended_search'] = urldecode($options['query']['extended_search']);
      }
      $options['query']['path'] = request_path();
      // t('Extended search')
      $link = l(t('Advanced search'), 'extended_search/' . $extended_search->entity_name, $options);
      $content = array(
        '#type' => 'markup',
        '#markup' => '<div class="extended-search-link">' . $link . '</div>',
      );

      //$block['subject'] = t('Extended Search');
      $block['content'] = $content;//extended_search_page_view($extended_search);
    }
  }

  return $block;
}

/**
 * Build the extended search query block content.
 */
function extended_search_build_extended_search_query_block() {
  $block = array();

  $parameters = extended_search_unpack_query_parameters(TRUE);
  if (isset($parameters)) {
    $extended_search = $parameters['extended_search'];

    $content = array();

    $query = array();

    // Full text search
    $text_query = array();

    if (!empty($parameters['text']['all'])) {
      $text_query[] = implode(' AND ', $parameters['text']['all']);
    }
    if (!empty($parameters['text']['exact'])) {
      $text_query[] = '"' . str_replace('"', '\"', $parameters['text']['exact']) . '"';
    }
    if (!empty($parameters['text']['any'])) {
      if (count($parameters['text']['any']) > 1) {
        $text_query[] = '(' . implode(' OR ', $parameters['text']['any']) . ')';
      }
      else {
        $text_query[] = $parameters['text']['any'][0];
      }
    }
    if (!empty($parameters['text']['exclude'])) {
      $text_query[] = ' NOT ' . implode(' AND NOT ', $parameters['text']['exclude']);
    }

    if (!empty($text_query)) {
      $query['Text'] = implode(' AND ', $text_query);
    }


    // Filters
    if (!empty($parameters['filters'])) {
      $param_filters = $parameters['filters'];

      $entity_info = entity_get_info($extended_search->target_entity_type);
      $base_table = $entity_info['base table'];

      $fields_info = field_info_fields();

      $fields = $extended_search->getFields();
      $handlers = $extended_search->getFieldHandlers();

      foreach ($param_filters as $field_name => $filters) {
        if (isset($handlers[$field_name])) {
          $handler = $handlers[$field_name];
          $field_info = $fields_info[$field_name];
          $type = $handler->getType($field_name, $field_info);

          $group_index = 0;
          $sub_query_groups = array();
          $sub_query = array();

          foreach ($filters as $index => $filter) {
            list($operator, $conjunction, $negation) = explode('|', $filter[0]);
            $value = $filter[1];

            if ($index === 0) {
              $sub_query_groups[$group_index] = array(
                'operator' => 'AND',
                'values' => array(),
              );
            }
            elseif ($conjunction !== 'OR') {
              $sub_query_groups[++$group_index] = array(
                'operator' => 'AND',
                'values' => array(),
              );
            }
            else {
              $sub_query_groups[$group_index]['operator'] = 'OR';
            }

            $filter_value = $handler->getFilter($field_name, $field_info, $value);

            $sub_query_groups[$group_index]['values'][] = (empty($negation) ? '' : $negation . ' ') . $filter_value['display'];
          }

          foreach ($sub_query_groups as $index => $sub_query_group) {
            $values = $sub_query_group['values'];

            if (count($values) > 1) {
              $sub_query[] = '(' . implode(' OR ', $values) . ')';
            }
            else {
              $sub_query[] = $values[0];
            }
          }

          if (!empty($sub_query)) {
            $query[$fields[$field_name]['label']] = implode(' AND ', $sub_query);
          }
        }
      }

      foreach ($query as $label => $value) {
        $content[] = array(
          '#type' => 'markup',
          '#markup' => '<div class="extended-search-query">' .
                       '<div class="extended-search-query-label">' . $label . '</div>' .
                       '<div class="extended-search-query-query">' . $value . '</div>' .
                       "</div>\n",
        );
      }

      if (!empty($content)) {
        $options = array('query' => drupal_get_query_parameters());
        if (isset($options['query']['extended_search'])) {
          $options['query']['extended_search'] = urldecode($options['query']['extended_search']);
        }
        $options['query']['path'] = request_path();
        $options['attributes'] = array('class' => 'extended-search-link');
        $link = l(t('Modify your search'), 'extended_search/' . $extended_search->entity_name, $options);

        $block['subject'] = t('Your advanced search query') . $link;
        $block['content'] = $content;

        drupal_add_css(
          drupal_get_path('module', 'extended_search') . '/css/query.block.css',
          array('group' => CSS_THEME, 'every_page' => FALSE, 'weight' => 999)
        );
      }
    }
  }

  return $block;
}

/**
 * Implements hook_extended_search_allowed_entity_types_alter().
 */
function extended_search_extended_search_allowed_entity_types_alter(&$allowed_entity_types) {
  $allowed_entity_types += array(
    'node' => 'node',
    'taxonomy_term' => 'taxonomy_term',
  );
}

/**
 * Implements hook_extended_search_field_handler_info().
 */
function extended_search_extended_search_field_handler_info() {
  $handlers = array();

  /*$handlers['text'] = array(
    'label' => t('Text'),
    'description' => t('Text field handler'),
    'class' => 'ExtendedSearchFieldHandlerText',
    'module' => 'extended_search',
    'file' => 'plugins/ExtendedSearchFieldHandlerText.inc',
    'schema types' => array(
      'text',
      'varchar',
      'char',
      'blob',
    ),
    'field types' => array(
      'text',
      'text_with_summary',
    ),
  );*/

  /*$handlers['numeric'] = array(
    'label' => t('Numeric'),
    'description' => t('Numeric field handler'),
    'class' => 'ExtendedSearchFieldHandlerNumeric',
    'module' => 'extended_search',
    'file' => 'plugins/ExtendedSearchFieldHandlerNumeric.inc',
    'schema types' => array(
      'serial',
      'int',
      'float',
      'numeric',
    ),
  );*/

  $handlers['date'] = array(
    'label' => t('Date'),
    'description' => t('Date field handler'),
    'class' => 'ExtendedSearchFieldHandlerDate',
    'module' => 'extended_search',
    'file' => 'plugins/ExtendedSearchFieldHandlerDate.inc',
    'schema types' => array(
      'int',
    ),
    'field types' => array(
      'datetime',
      'datestamp',
    ),
  );

  $handlers['taxonomy_term'] = array(
    'label' => t('Taxonomy term'),
    'description' => t('Taxonomy term reference field handler'),
    'class' => 'ExtendedSearchFieldHandlerTaxonomyTerm',
    'module' => 'extended_search',
    'file' => 'plugins/ExtendedSearchFieldHandlerTaxonomyTerm.inc',
    'field types' => array(
      'taxonomy_term_reference',
    ),
  );

  // TODO:
  // - list_integer,
  // - list_boolean,
  // - image,
  // - file,

  return $handlers;
}